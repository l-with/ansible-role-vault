---

- name: Read vault init file stat
  ansible.builtin.stat:
    path: "{{ vault_home }}/ansible_done_vault_init"
  ignore_errors: true
  register: _vault_init_file_stat

- name: Set fact _vault_initialized
  ansible.builtin.set_fact:
    _vault_initialized: "{{ _vault_init_file_stat.stat.exists }}"

- name: Ensure vault init when not initialized before
  ansible.builtin.shell:
    cmd: >
      docker exec vault 
      vault operator init -key-shares {{ vault_key_shares }} -key-threshold {{ vault_key_threshold }} -format=json >/tmp/ansible_done_vault_init
      && mv /tmp/ansible_done_vault_init {{ vault_home }}/ansible_done_vault_init
    creates: "{{ vault_home }}/ansible_done_vault_init"
  when: not _vault_initialized
  run_once: yes

- name: Skurp vault init info
  ansible.builtin.slurp:
    src: "{{ vault_home }}/ansible_done_vault_init"
  register: _vault_init_file_slurp
  run_once: yes

- name: Set fact _vault_init_info from slurp
  ansible.builtin.set_fact:
    _vault_init_info: "{{ _vault_init_file_slurp['content'] | b64decode }}"
  run_once: yes

- name: Print fact _vault_init_info
  ansible.builtin.debug:
    msg: "_vault_init_info: {{ _vault_init_info }}"
  when: vault_show_unseal_keys
  run_once: yes

- name: Set fact _vault_unseal_keys
  ansible.builtin.set_fact:
    _vault_unseal_keys:  "{{ _vault_init_info.unseal_keys_b64 }}"
  run_once: yes

- name: Set fact _vault_root_token
  ansible.builtin.set_fact:
    _vault_root_token: "{{ _vault_init_info.root_token }}"
  run_once: yes

- name: Print fact _vault_unseal_keys
  ansible.builtin.debug:
    msg: "_vault_unseal_keys: {{ _vault_unseal_keys }}"
  when: vault_show_unseal_keys
  run_once: yes

- name: Print fact _vault_root_token
  ansible.builtin.debug:
    msg: "_vault_root_token: {{ _vault_root_token }}"
  when: vault_show_root_token
  run_once: yes

- name: Ensure unseal vault
  ansible.builtin.shell:
    cmd: >
      docker exec vault 
      vault operator unseal {{ _vault_unseal_keys[_vault_unseal_key_index] }} 
      && touch {{ vault_home }}/ansible_done_vault_unseal_{{ _vault_unseal_key_index }}
    creates: "{{ vault_home }}/ansible_done_vault_unseal_{{ _vault_unseal_key_index }}"
  loop: "{{ range(0, vault_key_threshold) | list }}"
  loop_control:
    index_var: _vault_unseal_key_index
  run_once: yes

- name: Read "{{ vault_home }}/ansible_done_vault_init" stat
  ansible.builtin.stat:
    path: "{{ vault_home }}/ansible_done_vault_init"
  register: _ansible_done_vault_init_stat_output

- name: Set fact _ansible_done_vault_init_stat
  ansible.builtin.set_fact:
    _vault_init_time: "{{ _ansible_done_vault_init_stat_output.stat.ctime }}"

- name: Set fact _vault_mask_secrets
  ansible.builtin.set_fact:
    _vault_mask_secrets: "{{ 
      false 
      if vault_mask_secrets_after == -1 
      else ((ansible_date_time.epoch | float) - (_vault_init_time | float)) > (vault_mask_secrets_after | float)
    }}"

- name: Print fact _vault_mask_secrets
  ansible.builtin.debug:
    msg: "_vault_mask_secrets: {{ _vault_mask_secrets }}"

- name: Set fact _unseal_keys_masked
  ansible.builtin.set_fact:
    _unseal_keys_masked: "{{ (_unseal_keys_masked | default([])) + ['[masked]'] }}"
  loop: "{{ range(0, vault_key_shares) | list }}"
  when: _vault_mask_secrets

- name: Ensure mask secrets in "{{ vault_home }}/ansible_done_vault_init"
  ansible.builtin.copy:
    content: "{{ _vault_init_info 
      | combine({'unseal_keys_b64': _unseal_keys_masked})
      | combine({'unseal_keys_hex': _unseal_keys_masked})
      | combine({'root_token': '[masked]'})
      | to_nice_json
    }}"
    dest: "{{ vault_home }}/ansible_done_vault_init"
  when: _vault_mask_secrets

...