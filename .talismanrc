fileignoreconfig:

- filename: defaults/main.yml
  allowed_patterns:
    - >
      vault_show_unseal_keys: +false
    - >
      vault_key_shares: +\d+
    - >
      vault_key_threshold: +\d+
    - >
      vault_secret_engines: +\[\]
    - >
      vault_storage_raft_leader_client_key_file:  "{{ vault_home_path }}/ssl/tls.key"

- filename: tasks/vault_init.yml
  allowed_patterns:
    - >
      vault operator init -key-shares {{ vault_key_shares }} -key-threshold {{ vault_key_threshold }} -format=json >{{ vault_home_path }}/.ansible_done_vault_init &&
    - >
      {{ _vault_command_prefix }} {{ _vault_command_postfix }} operator init -key-shares {{ vault_key_shares }} -key-threshold {{ vault_key_threshold }} -format=json >{{ vault_home_path }}/.ansible_done_vault_init &&
    - >
      openssl enc -aes-256-cbc -pbkdf2 -pass env:SECRET -in {{ vault_home_path }}\/.ansible_done_vault_init -out {{ vault_home_path }}\/ansible_done_vault_init &&
    - >
      SECRET: "{{ vault_encrypt_secret }}"

- filename: tasks/vault_unseal.yml
  allowed_patterns:
    - >
      openssl enc -aes-256-cbc -pbkdf2 -pass env:SECRET -d -out {{ vault_home_path }}\/.ansible_done_vault_init -in {{ vault_home_path }}\/ansible_done_vault_init
    - >
      SECRET: "{{ vault_encrypt_secret }}"
    - >
      _vault_unseal_keys:  "{{ _vault_init_info.unseal_keys_b64 }}"
    - >
      msg: "_vault_unseal_keys: {{ _vault_unseal_keys }}"

- filename: tasks/vault_approle.yml
  allowed_patterns:
    - >
      _vault_approle_get_secret_id: "{{ _vault_approle_get_secret_id_result.stdout }}"
    - >
      vault_approle_secret_id: "{{ vault_approle_secret_id | default({}) }}"

- filename: try/playbook.yml
  allowed_patterns:
    - >
      vault_encrypt_secret: +'vault_encrypt_secret'
    - >
      vault_key_shares: +\d+

- filename: README.md
  allowed_patterns:
  - >
    \| init \| `vault_encrypt_secret` \| `CHANGE_vault_encrypt_secret` \| the secret the output of the vault initialization is encoded with<br \/> <span style="color:red">ATTENTION: Keep this confidential! This is the root of the secret management in vault.<\/span> \|
  - >
    \| approle \| `vault_approles` \| `\[\]` \| the list of approles to get role_id and secret_id for <br \/>the result is put with the role name as key into<ul><li>`vault_approle_role_id`<\/li><li>`vault_approle_secret_id`<\/li><\/ul> \|
  - >
    \| \w+ \| `vault_tls_key_file` \| \| the path of the private key for the certificate for TLS \(\[`tls_key_file`\]\(https://www.vaultproject.io/docs/configuration/listener/tcp#tls_key_file\)\) \|
 
  - >
    \| raft \| `vault_storage_raft_leader_client_key_file` \| `"{{ vault_home_path }}/ssl/tls.key"` \| the \[`leader_client_key_file`\]\(https://www.vaultproject.io/docs/configuration/storage/raft#leader_client_key_file\) \|


- filename: templates/vault.hcl.j2
  allowed_patterns:
    - >
      tls_key_file = "{{ vault_tls_key_file }}"
    - >
      leader_client_key_file  = "{{ vault_storage_raft_leader_client_key_file }}"

